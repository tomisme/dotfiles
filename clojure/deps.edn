;; https://github.com/seancorfield/dot-clojure
{:aliases
 {
  ;; clj -A:socket -r
  :socket
  {:jvm-opts ["-Dclojure.server.repl={:port,0,:accept,clojure.core.server/repl}"]
   :main-opts ["-e" "(.getLocalPort,(get-in,@#'clojure.core.server/servers,[\"repl\",:socket]))"]}

  :outdated
  {:extra-deps {olical/depot {:mvn/version "RELEASE"}}
   :main-opts ["-m" "depot.outdated.main"]}

  :paravim
  {:extra-deps {paravim {:mvn/version "RELEASE"}}
   :main-opts ["-m" "paravim.start"]}

  ; invoke with clojure -A:rebel
  ; NOTE: Don't use with the 'clj' or another readline-based system
  :rebel
  {:extra-deps {com.bhauman/rebel-readline {:mvn/version "RELEASE"}}
   :main-opts ["-m" "rebel-readline.main"]}

  ;; uberjar building:
  ;; - see https://github.com/seancorfield/depstar for a minimalist approach:
  ;;   - clj -A:uberjar result.jar
  ;; - to run it:
  ;;   - java -cp result.jar clojure.main -m mymain.namespace
  ;; - build a library JAR:
  ;;   - clj -A:jar result-lib.jar
  :uberjar
  {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
   :main-opts ["-m" "hf.depstar.uberjar"]}
  :jar
  {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
   :main-opts ["-m" "hf.depstar.jar"]}

  :new
  {:extra-deps {seancorfield/clj-new {:mvn/version "RELEASE"}}
   :main-opts ["-m" "clj-new.create"]}}}
